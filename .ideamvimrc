Plug 'tpope/vim-surround'
Plug 'tommcdo/vim-exchange'
Plug 'vim-scripts/ReplaceWithRegister'
Plug 'easymotion/vim-easymotion'

" Plug 'preservim/nerdtree`
" map <c-t>   :NERDTree<CR>

" set which-key
" let g:WhichKey_ShowVimActions = "false"
" let g:WhichKey_FontSize = 20
" let g:WhichKey_DefaultDelay = 1000

let mapleader = ","
set easymotion
map <leader>F <Plug>(easymotion-s)
map <leader>f <Plug>(easymotion-f)

map gF <Action>(ShowAllInSolutionExplorer)
map gb <Action>(ToggleLineBreakpoint)
map gB <Action>(ActivateCommitToolWindow)
map gf <Action>(HideAllWindows)
map ge <Action>(GotoNextError)
map gl <Action>(CommentByLineComment)
map [ <Action>(PreviousTab)
map ] <Action>(NextTab)
map gc <Action>(VcsShowNextChangeMarker)
map gC <Action>(VcsShowPrevChangeMarker)
map R <Action>(Vcs.RollbackChangedLines)
map g} <Action>(MoveTabRight)
map g{ <Action>(MoveEditorToOppositeTabGroup)
map g[ <Action>(PrevSplitter)
map g] <Action>(NextSplitter)
map gi <Action>(GotoImplementation)
map gd <Action>(GotoDeclaration)
map # <Action>(CloseEditor)
map go <Action>(CloseAllEditorsButActive)
map ga <Action>(FindUsages)
map gs <Action>(LocateInSolutionView)
map ) <Action>(MethodDown)
map ( <Action>(MethodUp)
map gA <Action>(RiderDebuggerApplyEncChagnes)
map gm <Action>(EditorMatchBrace)
map <leader>r <Action>(ChooseRunConfiguration)
map <leader>s <Action>(Stop)
map <leader>d <Action>(Debug)
map <leader>gn <Action>(StepOver)
map <leader>gi <Action>(StepInto)
map <leader>go <Action>(StepOut)
map <leader>G <Action>(Github.Open.In.Browser)
map <leader>C <Action>(CheckinProject)
map <leader>B <Action>(Git.Branches)
map <leader>P <Action>(Vcs.Push)

map <leader>en <Action>(ReSharperGotoNextErrorInSolution)
map <leader>ep <Action>(ReSharperGotoPrevErrorInSolution)

map <c-o> <Action>(Back)
map <c-i> <Action>(Forward)

" No need to "reselect" old visual area after indenting
:vnoremap < <gv
:vnoremap > >gv

set ignorecase
set incsearch
set ideajoin
set scrolloff=5
set NERDTree
set highlightedyank
